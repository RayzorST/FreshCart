import logging
import threading
import time
from app.services.rabbitmq import RabbitMQClient

logger = logging.getLogger(__name__)

class MessageConsumer:
    def __init__(self):
        self.is_running = False
        self.consumer_threads = {}
    
    def handle_image_processing(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            logger.info(f"üñºÔ∏è Processing image: {message}")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            # –ù–∞–ø—Ä–∏–º–µ—Ä: –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –±–ª—é–¥–∞, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏ —Ç.–¥.
            
        except Exception as e:
            logger.error(f"‚ùå Error processing image: {e}")
    
    def handle_order_processing(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤"""
        try:
            logger.info(f"üì¶ Processing order: {message}")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
            # –ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞, —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ç.–¥.
            
        except Exception as e:
            logger.error(f"‚ùå Error processing order: {e}")
    
    def handle_user_notifications(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            logger.info(f"üîî Sending notification: {message}")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            # –ù–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, email, SMS –∏ —Ç.–¥.
            
        except Exception as e:
            logger.error(f"‚ùå Error sending notification: {e}")
    
    def _wait_for_rabbitmq(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ RabbitMQ"""
        max_retries = 30
        retry_delay = 2
        
        for attempt in range(max_retries):
            try:
                test_client = RabbitMQClient()
                test_client.connect()
                test_client.close()
                logger.info("‚úÖ RabbitMQ is ready!")
                return True
            except Exception as e:
                if attempt < max_retries - 1:
                    logger.warning(f"üîÑ RabbitMQ not ready, retrying in {retry_delay}s... ({attempt + 1}/{max_retries})")
                    time.sleep(retry_delay)
                else:
                    logger.error(f"‚ùå RabbitMQ not available after {max_retries} attempts")
                    return False
        
        return False
    
    def _create_consumer_for_queue(self, queue: str, handler):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏"""
        def consumer_worker():
            logger.info(f"üöÄ Starting consumer worker for queue: {queue}")
            
            while self.is_running:
                client = None
                try:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                    client = RabbitMQClient()
                    client.connect()
                    
                    logger.info(f"üì• Consumer for '{queue}' is ready and consuming...")
                    client.consume_messages(queue, handler)
                    client.start_consuming()  # –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤
                    
                except Exception as e:
                    logger.error(f"‚ùå Consumer for '{queue}' failed: {e}")
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    if client:
                        try:
                            client.close()
                        except:
                            pass
                    
                    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ–º
                    if self.is_running:
                        logger.info(f"üîÑ Reconnecting to '{queue}' in 5 seconds...")
                        time.sleep(5)
                    else:
                        break
                finally:
                    # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
                    if client:
                        try:
                            client.close()
                        except:
                            pass
            
            logger.info(f"üõë Consumer worker for '{queue}' stopped")
        
        return consumer_worker
    
    def start_consumers(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö consumers –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö"""
        if not self._wait_for_rabbitmq():
            logger.error("‚ùå Cannot start consumers - RabbitMQ unavailable")
            return
            
        self.is_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º consumers –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
        queues_handlers = [
            ('image_processing', self.handle_image_processing),
            ('order_processing', self.handle_order_processing),
            ('user_notifications', self.handle_user_notifications),
        ]
        
        for queue, handler in queues_handlers:
            thread = threading.Thread(
                target=self._create_consumer_for_queue(queue, handler),
                daemon=True,
                name=f"Consumer-{queue}"
            )
            thread.start()
            self.consumer_threads[queue] = thread
            logger.info(f"‚úÖ Started consumer thread for queue: {queue}")
        
        logger.info(f"üéØ All consumers started. Total threads: {len(self.consumer_threads)}")
    
    def stop_consumers(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö consumers"""
        logger.info("üõë Stopping all consumers...")
        self.is_running = False
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Ç–æ–∫–∞–º –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
        time.sleep(2)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ç–æ–∫–æ–≤
        for queue, thread in self.consumer_threads.items():
            if thread.is_alive():
                logger.warning(f"‚ö†Ô∏è Consumer thread for '{queue}' is still alive")
            else:
                logger.info(f"‚úÖ Consumer thread for '{queue}' stopped")
        
        logger.info("üõë All consumers stopped")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä consumer
message_consumer = MessageConsumer()