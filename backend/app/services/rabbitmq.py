import pika
import json
import logging
from app.core.config import settings

logger = logging.getLogger(__name__)

class RabbitMQClient:
    def __init__(self):
        self.connection = None
        self.channel = None
        # –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ __init__
    
    def connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å RabbitMQ"""
        try:
            self.connection = pika.BlockingConnection(
                pika.URLParameters(settings.RABBITMQ_URL)
            )
            self.channel = self.connection.channel()
            
            # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
            queues = [
                ('image_processing', True),
                ('order_processing', True),
                ('user_notifications', True),
                ('ai_results', True),
                ('error_logs', True)
            ]
            
            for queue, durable in queues:
                self.channel.queue_declare(
                    queue=queue,
                    durable=durable,
                    arguments={
                        'x-message-ttl': 60000  # TTL 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
                    }
                )
            
            logger.info("‚úÖ Successfully connected to RabbitMQ")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to connect to RabbitMQ: {e}")
            raise
    
    def _ensure_connected(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        if not self.connection or self.connection.is_closed:
            self.connect()
    
    def publish_message(self, queue: str, message: dict):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
        try:
            self._ensure_connected()
                
            self.channel.basic_publish(
                exchange='',
                routing_key=queue,
                body=json.dumps(message),
                properties=pika.BasicProperties(
                    delivery_mode=2,  # persistent message
                    content_type='application/json'
                )
            )
            logger.debug(f"üì§ Message published to '{queue}': {message}")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to publish message: {e}")
            # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    
    def consume_messages(self, queue: str, callback):
        """–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            self._ensure_connected()
                
            def wrapped_callback(ch, method, properties, body):
                try:
                    message = json.loads(body)
                    callback(message)
                    ch.basic_ack(delivery_tag=method.delivery_tag)
                except Exception as e:
                    logger.error(f"‚ùå Error processing message: {e}")
                    ch.basic_nack(delivery_tag=method.delivery_tag, requeue=False)
            
            self.channel.basic_consume(
                queue=queue,
                on_message_callback=wrapped_callback,
                auto_ack=False
            )
            
            logger.info(f"üì• Started consuming from '{queue}'")
            
        except Exception as e:
            logger.error(f"‚ùå Failed to start consumer: {e}")
            raise

    def start_consuming_non_blocking(self):
        """–ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            self._ensure_connected()
            # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç, –æ–Ω –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
            logger.info("üîÑ Starting non-blocking consumption...")
        except Exception as e:
            logger.error(f"‚ùå Error in non-blocking consuming: {e}")
            raise

    def process_data_events(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è) - –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏"""
        try:
            if self.connection and not self.connection.is_closed:
                self.connection.process_data_events()
        except Exception as e:
            logger.error(f"‚ùå Error processing data events: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            self.connect()
    
    def start_consuming(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            self._ensure_connected()
            self.channel.start_consuming()
        except Exception as e:
            logger.error(f"‚ùå Error in consuming: {e}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.connection and not self.connection.is_closed:
            self.connection.close()
            logger.info("üîå RabbitMQ connection closed")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ RabbitMQ (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
rabbitmq_client = RabbitMQClient()